let isAnimationPaused = false;
let soundEnabled = true;
let currentYear = 2020;

// –î–∞–Ω—ñ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ä–æ–∫—ñ–≤
const yearData = {
    2020: { solar: 35, wind: 40, other: 25 },
    2021: { solar: 40, wind: 38, other: 22 },
    2022: { solar: 42, wind: 36, other: 22 },
    2023: { solar: 44, wind: 36, other: 20 },
    2024: { solar: 45, wind: 35, other: 20 }
};

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener('DOMContentLoaded', function() {
    initScrollAnimation();
    initTooltips();
    animateNumbers();
    updateProgressBar();
    initTouchGestures();
    initKeyboardControls();
});

// –ê–Ω—ñ–º–∞—Ü—ñ—è —á–∏—Å–µ–ª –ø—Ä–∏ –ø–æ—è–≤—ñ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
function animateNumbers() {
    const numbers = document.querySelectorAll('.stat-number');
    numbers.forEach(number => {
        const target = parseFloat(number.getAttribute('data-target'));
        const increment = target / 100;
        let current = 0;
        
        const timer = setInterval(() => {
            if (isAnimationPaused) return;
            
            current += increment;
            if (current >= target) {
                current = target;
                clearInterval(timer);
            }
            number.textContent = current.toFixed(1);
        }, 30);
    });
}

// –°–∫—Ä–æ–ª–ª-–∞–Ω—ñ–º–∞—Ü—ñ—è –¥–ª—è —Å–µ–∫—Ü—ñ–π
function initScrollAnimation() {
    const sections = document.querySelectorAll('.section');
    
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('visible');
            }
        });
    }, { threshold: 0.3 });

    sections.forEach(section => observer.observe(section));
}

// –°–∏—Å—Ç–µ–º–∞ –ø—ñ–¥–∫–∞–∑–æ–∫
function initTooltips() {
    const tooltip = Utils.DOM.$('#tooltip');
    const elements = Utils.DOM.$('[data-tooltip]');

    elements.forEach(element => {
        element.addEventListener('mouseenter', (e) => {
            tooltip.textContent = e.target.getAttribute('data-tooltip');
            Utils.Animation.fadeIn(tooltip, 200);
        });

        element.addEventListener('mousemove', Utils.Time.throttle((e) => {
            tooltip.style.left = e.pageX + 15 + 'px';
            tooltip.style.top = e.pageY - 10 + 'px';
        }, 16));

        element.addEventListener('mouseleave', () => {
            Utils.Animation.fadeOut(tooltip, 200);
        });
    });
}

// –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—É –∑ debounce –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
function updateProgressBar() {
    const updateProgress = Utils.Time.throttle(() => {
        const scrolled = (window.scrollY / (document.body.scrollHeight - window.innerHeight)) * 100;
        const clampedProgress = Utils.Math.clamp(scrolled, 0, 100);
        Utils.DOM.$('#progressBar').style.width = clampedProgress + '%';
    }, 16);
    
    window.addEventListener('scroll', updateProgress);
}

// –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—î—é
function toggleAnimation() {
    isAnimationPaused = !isAnimationPaused;
    const elements = document.querySelectorAll('*');
    elements.forEach(el => {
        if (isAnimationPaused) {
            el.classList.add('paused');
        } else {
            el.classList.remove('paused');
        }
    });
    
    if (soundEnabled) playSound('click');
}

function resetAnimation() {
    location.reload();
}

function toggleSound() {
    soundEnabled = !soundEnabled;
    if (soundEnabled) playSound('enable');
}

// –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —Ä–æ–∫–∞–º–∏ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º —É—Ç–∏–ª—ñ—Ç
function filterByYear(year) {
    currentYear = year;
    
    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ä–æ–∫—É
    Utils.Storage.set('selectedYear', year);
    
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—ó –∫–Ω–æ–ø–∫–∏
    Utils.DOM.$('.year-btn').forEach(btn => Utils.DOM.removeClass(btn, 'active'));
    event.target.classList.add('active');

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥—ñ–∞–≥—Ä–∞–º–∏
    const data = yearData[year];
    const circles = Utils.DOM.$('.interactive-circle');
    
    // –ê–Ω—ñ–º–æ–≤–∞–Ω–∞ –∑–º—ñ–Ω–∞ –∑–Ω–∞—á–µ–Ω—å
    animateCircleUpdate(circles[0], data.solar, '‚òÄÔ∏è', '–°–æ–Ω—è—á–Ω–∞');
    animateCircleUpdate(circles[1], data.wind, 'üí®', '–í—ñ—Ç—Ä–æ–≤–∞');
    animateCircleUpdate(circles[2], data.other, 'üåø', '–Ü–Ω—à—ñ');

    if (soundEnabled) playSound('filter');
}

// –ê–Ω—ñ–º–∞—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—Ä—É–≥–æ–≤–∏—Ö –¥—ñ–∞–≥—Ä–∞–º
function animateCircleUpdate(circle, targetValue, icon, label) {
    const currentValue = parseInt(circle.style.getPropertyValue('--percentage')) || 0;
    const startTime = performance.now();
    const duration = 500;
    
    function animate(currentTime) {
        const elapsed = currentTime - startTime;
        const progress = Utils.Math.clamp(elapsed / duration, 0, 1);
        
        const currentAnimValue = Utils.Math.lerp(currentValue, targetValue, progress);
        const roundedValue = Utils.Math.round(currentAnimValue, 0);
        
        circle.style.setProperty('--percentage', roundedValue + '%');
        circle.querySelector('.circle-text').innerHTML = `${icon}<br>${roundedValue}%<br>${label}`;
        
        if (progress < 1) {
            requestAnimationFrame(animate);
        }
    }
    
    requestAnimationFrame(animate);
}

// –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
function shareResults() {
    if (navigator.share) {
        navigator.share({
            title: '–í—ñ–¥–Ω–æ–≤–ª—é–≤–∞–Ω–∞ –µ–Ω–µ—Ä–≥—ñ—è –≤ –£–∫—Ä–∞—ó–Ω—ñ',
            text: '–ü–æ–¥–∏–≤—ñ—Ç—å—Å—è –Ω–∞ —Ä–æ–∑–≤–∏—Ç–æ–∫ –∑–µ–ª–µ–Ω–æ—ó –µ–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏ –≤ –£–∫—Ä–∞—ó–Ω—ñ!',
            url: window.location.href
        });
    } else {
        // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä—ñ–≤ –±–µ–∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ Web Share API
        navigator.clipboard.writeText(window.location.href);
        alert('–ü–æ—Å–∏–ª–∞–Ω–Ω—è —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É!');
    }
    if (soundEnabled) playSound('success');
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
function downloadData() {
    const data = {
        overview: {
            installedCapacity: '12.5 –ì–í—Ç',
            shareInTotal: '15.2%',
            activeProjects: 450,
            co2Reduction: '2.8 –º–ª–Ω —Ç–æ–Ω–Ω'
        },
        distribution: yearData[currentYear],
        timeline: yearData
    };

    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'renewable_energy_data.json';
    a.click();
    URL.revokeObjectURL(url);

    if (soundEnabled) playSound('download');
}

// –û–±—Ä–æ–±–∫–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω–∏—Ö –∫–æ–º–∞–Ω–¥
function initKeyboardControls() {
    document.addEventListener('keydown', (e) => {
        switch(e.key) {
            case ' ':
                e.preventDefault();
                toggleAnimation();
                break;
            case 'r':
            case 'R':
                resetAnimation();
                break;
            case 's':
            case 'S':
                toggleSound();
                break;
            case 'ArrowLeft':
                if (currentYear > 2020) {
                    changeYear(currentYear - 1);
                }
                break;
            case 'ArrowRight':
                if (currentYear < 2024) {
                    changeYear(currentYear + 1);
                }
                break;
        }
    });
}

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–º—ñ–Ω–∏ —Ä–æ–∫—É –ø—Ä–æ–≥—Ä–∞–º–Ω–æ
function changeYear(year) {
    const yearButton = document.querySelector(`[onclick="filterByYear(${year})"]`);
    if (yearButton) {
        yearButton.click();
    }
}

// –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Å–µ–Ω—Å–æ—Ä–Ω–∏—Ö –∂–µ—Å—Ç—ñ–≤ –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤
function initTouchGestures() {
    let touchStartX = 0;
    let touchStartY = 0;

    document.addEventListener('touchstart', (e) => {
        touchStartX = e.touches[0].clientX;
        touchStartY = e.touches[0].clientY;
    });

    document.addEventListener('touchend', (e) => {
        const touchEndX = e.changedTouches[0].clientX;
        const touchEndY = e.changedTouches[0].clientY;
        
        const deltaX = touchEndX - touchStartX;
        const deltaY = touchEndY - touchStartY;

        // –°–≤–∞–π–ø –≤–ª—ñ–≤–æ/–≤–ø—Ä–∞–≤–æ –¥–ª—è –∑–º—ñ–Ω–∏ —Ä–æ–∫—ñ–≤
        if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 50) {
            if (deltaX > 0 && currentYear > 2020) {
                changeYear(currentYear - 1);
            } else if (deltaX < 0 && currentYear < 2024) {
                changeYear(currentYear + 1);
            }
        }
    });
}